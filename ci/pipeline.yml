---
groups:
- name: deployment
  jobs:
  - deploy-prometheus-staging
  - deploy-prometheus-production
- name: checks
  jobs:
  - awslogs-check
  - aws-mfa-check
  - aws-rds-storage-check
  - concourse-has-auth-check
  - concourse-main-opslogin-check
  - concourse-teams-check
  - prometheus-down-check-staging
  - prometheus-down-check

jobs:
- name: awslogs-check
  serial_groups: [production]
  plan:
  - aggregate:
    - get: prometheus-check-timer
      trigger: true
    - get: prometheus-config
      resource: prometheus-config
  - task: awslogs
    file: prometheus-config/ci/awslogs.yml
    tags: [iaas]
    params:
      AWS_DEFAULT_REGION: ((aws-region))
      GATEWAY_HOST: ((gateway-host))
      HEARTBEAT_GROUP: /var/log/syslog
  - put: slack
    params:
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
      text: |
        :flashing-alert: Instances should be stopped due to failure to log, but that's commented out pending SCR approval!
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      text_file: stopping/instance-id

- name: aws-rds-storage-check
  serial_groups: [production]
  plan:
  - aggregate:
    - get: prometheus-check-timer
      trigger: true
    - get: prometheus-config
      resource: prometheus-config
  - task: aws-rds-storage-check
    file: prometheus-config/ci/aws-rds-storage.yml
    params:
      AWS_DEFAULT_REGION: ((aws-region))
      AWS_ACCESS_KEY_ID: ((aws-rds-access-key-id))
      AWS_SECRET_ACCESS_KEY: ((aws-rds-secret-access-key))
      GATEWAY_HOST: ((gateway-host))

- name: aws-mfa-check
  serial_groups: [production]
  plan:
  - aggregate:
    - get: prometheus-check-timer
      trigger: true
    - get: prometheus-config
      resource: prometheus-config
  - task: aws-mfa
    file: prometheus-config/ci/aws-mfa.yml
    tags: [iaas]
    params:
      AWS_DEFAULT_REGION: ((aws-region))
      GATEWAY_HOST: ((gateway-host))

- name: concourse-has-auth-check
  serial_groups: [production]
  plan:
  - aggregate:
    - get: prometheus-check-timer
      trigger: true
    - get: prometheus-config
      resource: prometheus-config
  - task: concourse-has-auth
    file: prometheus-config/ci/concourse-has-auth.yml
    params:
      AWS_DEFAULT_REGION: ((aws-region))
      GATEWAY_HOST: ((gateway-host))

- name: concourse-main-opslogin-check
  serial_groups: [production]
  plan:
  - aggregate:
    - get: prometheus-check-timer
      trigger: true
    - get: prometheus-config
      resource: prometheus-config
  - task: concourse-main-opslogin
    file: prometheus-config/ci/concourse-main-opslogin.yml
    params:
      AWS_DEFAULT_REGION: ((aws-region))
      GATEWAY_HOST: ((gateway-host))

- name: concourse-teams-check
  serial_groups: [production]
  plan:
  - aggregate:
    - get: prometheus-check-timer
      trigger: true
    - get: prometheus-config
      resource: prometheus-config
  - task: concourse-teams
    file: prometheus-config/ci/concourse-teams.yml
    params:
      AWS_DEFAULT_REGION: ((aws-region))
      GATEWAY_HOST: ((gateway-host))

- name: prometheus-down-check
  serial_groups: [production]
  plan:
  - aggregate:
    - get: prometheus-check-timer
      trigger: true
    - get: prometheus-config
  - task: prometheus-down
    file: prometheus-config/ci/prometheus-down.yml
    on_failure:
      task: pagerduty-notify
      file: prometheus-config/ci/pagerduty-notify.yml
      params:
        PAGERDUTY_KEY: ((pagerduty-key))
        ALERT_MESSAGE: Prometheus seems to be down or hung!
        ALERT_SOURCE: Concourse prometheus-down-check
        ALERT_SEVERITY: critical
        ALERT_COMPONENT: Prometheus

- name: prometheus-down-check-staging
  serial_groups: [staging]
  plan:
  - aggregate:
    - get: prometheus-check-timer
      trigger: true
    - get: prometheus-config
  - task: prometheus-down
    file: prometheus-config/ci/prometheus-down.yml
    on_failure:
      task: pagerduty-notify
      file: prometheus-config/ci/pagerduty-notify.yml
      params:
        PAGERDUTY_KEY: ((pagerduty-key-staging))
        ALERT_MESSAGE: Staging Prometheus seems to be down or hung!
        ALERT_SOURCE: Concourse prometheus-down-check-staging
        ALERT_SEVERITY: warning
        ALERT_COMPONENT: Prometheus
    params:
      PROMETHEUSHOST: 1.prometheus.staging-monitoring.prometheus-staging.toolingbosh
      ALERTMANAGERHOST: 1.alertmanager.staging-monitoring.prometheus-staging.toolingbosh


- name: deploy-prometheus-staging
  serial: true
  plan:
  - aggregate:
    - get: master-bosh-root-cert
    - get: prometheus-config
      trigger: true
    - get: common
      resource: common-staging
      trigger: true
    - get: prometheus-release
      trigger: true
    - get: oauth2-proxy-release
      trigger: true
    - get: prometheus-stemcell
      trigger: true
    - get: pipeline-tasks
  - put: prometheus-staging-deployment
    params: &deploy-params
      cert: master-bosh-root-cert/master-bosh.crt
      manifest: prometheus-config/bosh/manifest.yml
      releases:
      - prometheus-release/*.tgz
      - oauth2-proxy-release/*.tgz
      stemcells:
      - prometheus-stemcell/*.tgz
      ops_files:
      - prometheus-config/bosh/opsfiles/rules.yml
      - prometheus-config/bosh/opsfiles/staging.yml
      vars_files:
      - prometheus-config/bosh/varsfiles/staging.yml
      - common/secrets.yml
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy prometheus on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed prometheus on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: deploy-prometheus-production
  serial: true
  serial_groups: [production]
  plan:
  - aggregate:
    - get: master-bosh-root-cert
    - get: prometheus-config
      passed: [deploy-prometheus-staging]
      trigger: true
    - get: common
      resource: common-production
      trigger: true
    - get: prometheus-release
      passed: [deploy-prometheus-staging]
      trigger: true
    - get: oauth2-proxy-release
      passed: [deploy-prometheus-staging]
      trigger: true
    - get: prometheus-stemcell
      passed: [deploy-prometheus-staging]
      trigger: true
    - get: pipeline-tasks
  - put: prometheus-production-deployment
    params:
      <<: *deploy-params
      ops_files:
      - prometheus-config/bosh/opsfiles/rules.yml
      - prometheus-config/bosh/opsfiles/production.yml
      vars_files:
      - prometheus-config/bosh/varsfiles/production.yml
      - common/secrets.yml
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy prometheus on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed prometheus on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

resources:
- name: master-bosh-root-cert
  type: s3-iam
  source:
    bucket: ((prometheus-production-private-bucket))
    region_name: ((aws-region))
    versioned_file: master-bosh.crt

- name: common-staging
  type: cg-common
  source:
    region: ((prometheus-staging-private-region))
    bucket_name: ((prometheus-staging-private-bucket))
    secrets_file: staging-prometheus.yml
    secrets_passphrase: ((prometheus-staging-private-passphrase))
    bosh_cert: bosh-tooling.pem

- name: common-production
  type: cg-common
  source:
    region: ((prometheus-production-private-region))
    bucket_name: ((prometheus-production-private-bucket))
    secrets_file: production-prometheus.yml
    secrets_passphrase: ((prometheus-production-private-passphrase))
    bosh_cert: bosh-tooling.pem

- name: prometheus-release
  type: github-release
  source:
    owner: bosh-prometheus
    repository: prometheus-boshrelease
    access_token: ((github-access-token))

- name: oauth2-proxy-release
  type: s3-iam
  source:
    bucket: ((s3-bosh-releases-bucket))
    regexp: oauth2-proxy-(.*).tgz
    region_name: ((aws-region))

- name: prometheus-config
  type: git
  source:
    uri: ((cg-deploy-prometheus-git-url))
    branch: ((cg-deploy-prometheus-git-branch))

- name: prometheus-stemcell
  type: bosh-io-stemcell
  source:
    name: bosh-aws-xen-hvm-ubuntu-trusty-go_agent

- name: prometheus-staging-deployment
  type: bosh-deployment
  source:
    target: ((prometheus-staging-deployment-bosh-target))
    client: ci
    client_secret: ((tooling_bosh_uaa_ci_client_secret))
    ca_cert: ((common_ca_cert))
    deployment: prometheus-staging

- name: prometheus-production-deployment
  type: bosh-deployment
  source:
    target: ((prometheus-production-deployment-bosh-target))
    client: ci
    client_secret: ((tooling_bosh_uaa_ci_client_secret))
    ca_cert: ((common_ca_cert))
    deployment: prometheus-production

- name: pipeline-tasks
  type: git
  source:
    uri: ((pipeline-tasks-git-url))
    branch: ((pipeline-tasks-git-branch))

- name: slack
  type: slack-notification
  source:
    url: ((slack-webhook-url))

- name: prometheus-check-timer
  type: time
  source:
    interval: 30m

resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource

- name: bosh-deployment
  type: docker-image
  source:
    repository: cloudfoundry/bosh-deployment-resource

- name: cg-common
  type: docker-image
  source:
    repository: 18fgsa/cg-common-resource

- name: s3-iam
  type: docker-image
  source:
    repository: 18fgsa/s3-resource
